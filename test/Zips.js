require('../nodash').install(GLOBAL);
var assert = require('assert');

function maximum7(a, b, c, d, e, f, g) {
    return maximum([a, b, c, d, e, f, g]);
}

describe('Zips', function () {

    it('zip', function () {
        assert.deepEqual(
            [ [1,4], [2,5], [3,6] ],
            zip( [1,2,3], [4,5,6] )
        );
    });
 
    it('zip /w stream', function () {
        assert.deepEqual(
            [ [1,4], [2,5], [3,6] ],
            consume(zip( stream([1,2,3]), [4,5,6] ))
        );
        assert.deepEqual(
            [ [1,4], [2,5], [3,6] ],
            consume(zip( [1,2,3], stream([4,5,6]) ))
        );
        assert.deepEqual(
            [ [1,4], [2,5], [3,6] ],
            consume(zip( stream([1,2,3]), stream([4,5,6]) ))
        );
    });

    it('zip3', function () {
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            zip3( [1,2,3], [4,5,6], [7,8,9] )
        );
    });

    it('zip3 /w stream', function () {
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            consume(zip3( stream([1,2,3]), [4,5,6], [7,8,9] ))
        );
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            consume(zip3( [1,2,3], stream([4,5,6]), [7,8,9] ))
        );
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            consume(zip3( stream([1,2,3]), stream([4,5,6]), [7,8,9] ))
        );
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            consume(zip3( stream([1,2,3]), stream([4,5,6]), stream([7,8,9]) ))
        );
    });

    it('zip4', function () {
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            consume(zip4(
                stream([1,2,3]),
                stream([4,5,6]),
                stream([7,8,9]),
                stream([10,11,12])
            ))
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            consume(zip4(
                [1,2,3],
                stream([4,5,6]),
                stream([7,8,9]),
                stream([10,11,12])
            ))
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            consume(zip4(
                [1,2,3],
                stream([4,5,6]),
                stream([7,8,9]),
                [10,11,12]
            ))
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            consume(zip4(
                [1,2,3],
                stream([4,5,6]),
                [7,8,9],
                stream([10,11,12])
            ))
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            consume(zip4(
                [1,2,3],
                stream([4,5,6]),
                [7,8,9],
                [10,11,12]
            ))
        );
    });
 
    it('zip4 /w stream', function () {
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3], [4,5,6], [7,8,9], [10,11,12] )
        );
    });

    it('zip5', function () {
        assert.deepEqual(
            [ [1,4,7,10,13], [2,5,8,11,14], [3,6,9,12,15] ],
            zip5( [1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15] )
        );
    });

    it('zip6', function () {
        assert.deepEqual(
            [ [1,4,7,10,13,16], [2,5,8,11,14,17], [3,6,9,12,15,18] ],
            zip6( [1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18] )
        );
    });

    it('zip7', function () {
        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7( [1,2,3], [4,5,6], [7,8,9], [10,11,12],
                  [13,14,15], [16,17,18], [19,20,21] )
        );
    });

    it('zipWith7', function () {
        assert.deepEqual(
            [13, 14],
            zipWith7( maximum7, [1,2], [3,4], [5,6], [7,8], [9,10], [11,12], [13,14] )
        );
    });
});


describe('Zips (curried)', function () {

    it('zip', function () {
        assert.deepEqual(
            [ [1,4], [2,5], [3,6] ],
            zip( [1,2,3] )( [4,5,6] )
        );
    });
 
    it('zip3', function () {
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            zip3( [1,2,3] )( [4,5,6] )( [7,8,9] )
        );
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            zip3( [1,2,3] , [4,5,6] )( [7,8,9] )
        );
        assert.deepEqual(
            [ [1,4,7], [2,5,8], [3,6,9] ],
            zip3( [1,2,3] )( [4,5,6] , [7,8,9] )
        );
    });

    it('zip4', function () {
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] )( [4,5,6] )( [7,8,9] )( [10,11,12] )
        );

        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] , [4,5,6] )( [7,8,9] )( [10,11,12] )
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] )( [4,5,6] , [7,8,9] )( [10,11,12] )
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] )( [4,5,6] )( [7,8,9] , [10,11,12] )
        );

        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] , [4,5,6] , [7,8,9] )( [10,11,12] )
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] )( [4,5,6] , [7,8,9] , [10,11,12] )
        );
        assert.deepEqual(
            [ [1,4,7,10], [2,5,8,11], [3,6,9,12] ],
            zip4( [1,2,3] , [4,5,6] )( [7,8,9] , [10,11,12] )
        );
    });
 
    it('zip5', function () {

        var zip5_1 = zip5( [1,2,3] );
        var zip5_2 = zip5( [1,2,3], [4,5,6] );
        var zip5_3 = zip5( [1,2,3], [4,5,6], [7,8,9] );
        var zip5_4 = zip5( [1,2,3], [4,5,6], [7,8,9], [10,11,12] );

        assert.deepEqual(
            [ [1,4,7,10,13], [2,5,8,11,14], [3,6,9,12,15] ],
            zip5_1( [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13], [2,5,8,11,14], [3,6,9,12,15] ],
            zip5_2( [7,8,9], [10,11,12], [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13], [2,5,8,11,14], [3,6,9,12,15] ],
            zip5_3( [10,11,12], [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13], [2,5,8,11,14], [3,6,9,12,15] ],
            zip5_4( [13,14,15], [16,17,18] )
        );

    });

    it('zip6', function () {

        var zip6_1 = zip6( [1,2,3] );
        var zip6_2 = zip6( [1,2,3], [4,5,6] );
        var zip6_3 = zip6( [1,2,3], [4,5,6], [7,8,9] );
        var zip6_4 = zip6( [1,2,3], [4,5,6], [7,8,9], [10,11,12] );
        var zip6_5 = zip6( [1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15] );

        assert.deepEqual(
            [ [1,4,7,10,13,16], [2,5,8,11,14,17], [3,6,9,12,15,18] ],
            zip6_1( [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16], [2,5,8,11,14,17], [3,6,9,12,15,18] ],
            zip6_2( [7,8,9], [10,11,12], [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16], [2,5,8,11,14,17], [3,6,9,12,15,18] ],
            zip6_3( [10,11,12], [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16], [2,5,8,11,14,17], [3,6,9,12,15,18] ],
            zip6_4( [13,14,15], [16,17,18] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16], [2,5,8,11,14,17], [3,6,9,12,15,18] ],
            zip6_5( [16,17,18] )
        );
    });

    it('zip7', function () {

        var zip7_1 = zip7( [1,2,3] );
        var zip7_2 = zip7( [1,2,3], [4,5,6] );
        var zip7_3 = zip7( [1,2,3], [4,5,6], [7,8,9] );
        var zip7_4 = zip7( [1,2,3], [4,5,6], [7,8,9], [10,11,12] );
        var zip7_5 = zip7( [1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15] );
        var zip7_6 = zip7( [1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18] );

        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7_1( [4,5,6], [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7_2( [7,8,9], [10,11,12], [13,14,15], [16,17,18], [19,20,21] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7_3( [10,11,12], [13,14,15], [16,17,18], [19,20,21] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7_4( [13,14,15], [16,17,18], [19,20,21] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7_5( [16,17,18], [19,20,21] )
        );
        assert.deepEqual(
            [ [1,4,7,10,13,16,19], [2,5,8,11,14,17,20], [3,6,9,12,15,18,21] ],
            zip7_6( [19,20,21] )
        );
    });

    it('zipWith7', function () {
        var zip7_1 = zipWith7( maximum7, [1,2] );
        var zip7_2 = zipWith7( maximum7, [1,2], [3,4] );
        var zip7_3 = zipWith7( maximum7, [1,2], [3,4], [5,6] );
        var zip7_4 = zipWith7( maximum7, [1,2], [3,4], [5,6], [7,8] );
        var zip7_5 = zipWith7( maximum7, [1,2], [3,4], [5,6], [7,8], [9,10] );
        var zip7_6 = zipWith7( maximum7, [1,2], [3,4], [5,6], [7,8], [9,10], [11,12] );

        var result = [ 13, 14 ];

        assert.deepEqual(result, zip7_1([3,4], [5,6], [7,8], [9,10], [11,12], [13,14]));
        assert.deepEqual(result, zip7_2([5,6], [7,8], [9,10], [11,12], [13,14]));
        assert.deepEqual(result, zip7_3([7,8], [9,10], [11,12], [13,14]));
        assert.deepEqual(result, zip7_4([9,10], [11,12], [13,14]));
        assert.deepEqual(result, zip7_5([11,12], [13,14]));
        assert.deepEqual(result, zip7_6([13,14]));
    });

});
